//------------------------------------------------
// 매개변수로 들어온 데이터가 비어있거나 공백으로 구성되어 있으면 
// true 리턴, 아니면 false 리턴하는 함수 선언
// 매개변수: str (문자열이 저장되는 매개변수)
//------------------------------------------------
function isEmpty(str) {

	/*
	//------------------------------------------------
	try{
		var flag = false;   // true/false 변수로 많이 사용한다.
		if( str.split(" ").join("") == "" ) {
			flag = true;
		} 
		return flag;
		// flag 안의 데이터를 리턴한다
	} catch(e) {
		alert("isEmpty 함수 호출 시 예외 발생!" + e.message);
		return false;
	}
	// 이 코드 보다 아래 코드와 같이 변수 flag를 하나 선언하여 
	// 마지막에 return 해 주는것이 좋다
	// 유연하게 대처하기 좋다
	*/
	//------------------------------------------------
	var flag = false;   // true/false 변수로 많이 사용한다.
	
	//------------------------------------------------
	// try 구문 선언. try 구문 안에는 예외발생 가능성이 있는 코드가 삽입됨
	//------------------------------------------------
	try{
		// 매개변수로 들어온 문자가 길이가 없거나 공백으로 이루어져 있으면
		// flag 변수에 true 저장하기
		if( str.split(" ").join("") == "" ) {
			flag = true;
		} 
	//------------------------------------------------
	// catch 구문 선언. 
	// catch 구문 안에는 try 구문에서 예외발생 시 실행할 코드가 삽입됨
	// catch 구문의 매개변수 e 에는 예외를 관리하는 객체의 메위주가 들어온다
	// catch(~){~} 구문은 try 구문에서 예외발생 시 호출하는 일종의 함수와 비슷하다
	//------------------------------------------------
	} catch(e) {
		alert("isEmpty 함수 호출 시 예외 발생!" + e.message);
		flag = false;
	}
	//------------------------------------------------
	// flag 변수 안의 데이터를 리턴하기
	//------------------------------------------------
	return flag;
	
	//------------------------------------------------
	// catch 구문 안에서 flag = false 를 선언한 이유
	// 해당 코드는 짧아서 flag를 다시 선언해도 문제가 없지만
	// 긴 구문에서는 flag의 값이 변경될 수 있다
	// 확실하게 flag의 값을 false로 처리하기 위하여 
	// catch 구문 안에서 확실히 데이터를 대입한 것이다
	//------------------------------------------------

}

// 한글 이름 유효성 체크
// 한글 2자 ~ 20자 입력
// 유효성 체크 통과 시 true, 아니면 false 리턴
function isMem_name(mem_name){
	var regExp = new RegExp(/^[가-힣]{2,20}$/);
	return regExp.test(mem_name);
}


// 아이디 유효성 체크
// 첫글자는 영소문자 입력하고, 이후 영소문자 숫자 _ 만 입력가능. 5자~10자 입력
// 유효성 체크 통과 시 true, 아니면 false 리턴
function isUid(uid) {
	var regExp = new RegExp(/^[a-z][a-z0-9_]{4,9}$/);
	return regExp.test(uid);
}

// 비밀번호 유효성 체크
// 영소문자, 숫자, _ 만 입력, 5 ~ 8자 입력
// 유효성 체크 통과 시 true, 아니면 false 리턴
function isPwd(pwd) {
	var regExp = new RegExp(/^[a-z0-9_]{5,8}$/);
	return regExp.test(pwd);
}

//------------------------------------------------
// 이메일 체크 함수 선언
// 매개변수로 들어온 이메일 문자가 이메일 문자 패턴에 맞으면 true 리턴
// 틀리면 false 리턴하기
// 매개변수 : email (검사할 문자열, 즉 이메일 문자열이 저장되는 매개변수)
//------------------------------------------------
function isValidEmail(email) {
	var flag = false;

	try{
		//------------------------------------------------
		// 이메일 문자의 패턴을 관리하는 RegExp 객체 생성하기
		// RegExp 객체의 test 메소드를 호출하여 매개변수로 들어온 문자의
		// 이메일 문자 패턴에 맞는지 여부를 구해 flag 변수에 저장하기
		//------------------------------------------------
		var regExp = new RegExp(/^([0-9a-zA-Z_-]+)@([0-9a-zA-Z_-]+)(\.[0-9a-zA-Z_-]+){1,2}$/);
		flag = regExp.test(email);
	} catch(e) {
		alert("isValidEmail 함수 호출 시 예외 발생!" + e.message);
		flag = false;
	}
	//------------------------------------------------
	// flag 변수 안의 데이터를 리턴하기
	//------------------------------------------------
	return flag;
}

//------------------------------------------------
// 문자열의 패턴 체크 함수 선언
// 매개변수로 들어온 RegExp 객체와 검사 문자열을 이용하여
// 검사 문자열의 RegExp 객체가 관리하는 문자 패턴에 맞으면 true 리턴
// 틀리면 false 리턴하기
// 매개변수: regExpObj (RegExp 객체의 메모리 위치 주소값이 저장되는 매개변수)
// 			targetStr (패턴을 검사할 문자열이 저장되는 매개변수)
//------------------------------------------------
function isValidPattern(regExpObj, targetStr) {
	var flag = false;
	
	try{
		// RegExp 객체의 test() 메서드 호출하여 받은 리턴값
		flag = regExpObj.test(targetStr);
	} catch(e) {
		alert("isValidPattern 함수 호출 시 예외 발생!" + e.message);
		flag = false;
	}
	return flag;
}

//------------------------------------------------------------------------------
// checkbox 또는 radio 의 체크 개수 구해서 리턴하는 함수 선언
// arrObj (Array 객체의 메위주가 저장되는 매개변수 선언 
// Array 객체 안의 배열변수 안에는 Radio 객체 또는 checkbox 객체의 메위주가 들어 있다)
//------------------------------------------------------------------------------
function getCheckedCnt( arrObj ) {
	//--------------------------------------------------------------------------
	// Radio 또는 checkbox 의 체크 개수가 저장되는 변수 checkedCnt 선언하고 0 저장
	//--------------------------------------------------------------------------
	var checkedCnt = 0;

	try{

		//--------------------------------------------------------------------------
		// len 변수 선언하고 매개변수로 들어온 Array 객체의 배열변수 개수를 구해 저장하기
		//--------------------------------------------------------------------------
		var len = arrObj.length;

		//------------------------------------------------------------
		// len 변수 안의 데이터가 undefined 면, 
		// 즉 매개변수로 Array 객체가 안들어오고 다른 객체 
		// 즉 Checkbox 객체 또는 Radio 객체가 들어오면 
		// 존재하지 않는 length 라는 속성변수에는 undefined 가 들어 있다
		// Radio 객체 또는 Checkbox 객체의 메위주 상상도를 살펴봐야 한다
		//------------------------------------------------------------
		if(len == undefined) {
			if(!arrObj.checked){
				return 0;
			} else {
				return 1;
			}
		}

		//--------------------------------------------------------------------
		// 반복문 선언, 반복문은 0 ~ len 변수 안의 배열변수 개수 미만 만큼 돈다
		// 반복문을 돌려서 Array 객체의 배열변수 안에 저장된 
		// Radio 객체 또는 checkbox 객체에 접근하기 위하여
		//--------------------------------------------------------------------
		for(var i = 0; i < len; i++) {
			//-----------------------------------------------------------------------------
			// 만약 i 번째 배열변수 안의 Radio 객체 또는 checkbox 객체의 속성변수
			// checked 에 true가 저장되어 있으면 checkedCnt 변수 안의 숫자를 1 업데이트하기
			// 즉, i 번째 Radio 또는 checkbox 입력양식에 체크가 되어 있으면 
			// checkedCnt 변수 안의 숫자를 1 업데이트하기
			//-----------------------------------------------------------------------------
			if(arrObj[i].checked) { checkedCnt++; }
		}
	} catch(e) {
		alert("getCheckedCnt 함수 호출 시 예외 발생!" + e.message);
		checkedCnt = 0;
	}
	//-----------------------------------------------------
	// checkedCnt 변수 안의 데이터 리턴하기
	// 즉, Radio 또는 checkbox 입력양식에 체크 개수 리턴하기
	//-----------------------------------------------------
	return checkedCnt;

}

//-----------------------------------------------------
// 현재 시각의 요일을 리턴하는 함수 선언
//-----------------------------------------------------
function getTodayWeek() {
	//-----------------------------------------------------
	// <1> today 변수 선언, 현재 날짜를 관리하는 Date 객체 생성
	// Date 객체의 메위주를 today 변수에 저장
	// <2> weekNo 변수 선언, Date 객체의 getDay() 메소드 호출하여
	// 현재 요일 번호 얻어 weekNo 변수에 저장하기
	// <3> week 변수 선언, "일요일" 저장하기
	// <4> 요일 번호에 따라 week 변수에 오늘 요일 문자 저장하기
	// <5> 오늘 요일 문자 리턴하기
	//-----------------------------------------------------
	var today = new Date();			// <1>
	var weekNo = today.getDay();	// <2>
	var week = "일요일";			// <3>

	if(weekNo == 0) { week = "일요일"; } 	// <4>
	else if(weekNo == 1) { week = "월요일"; } 
	else if(weekNo == 2) { week = "화요일"; } 
	else if(weekNo == 3) { week = "수요일"; } 
	else if(weekNo == 4) { week = "목요일"; } 
	else if(weekNo == 5) { week = "금요일"; } 
	else if(weekNo == 6) { week = "토요일"; } 

	return week;					// <5>
}


/*
//-----------------------------------------------------
// 위 함수는 아래 처럼도 가능하다.
// 똑같은 이름의 함수가 여러개 있다면 마지막 함수가 진짜다
//-----------------------------------------------------
function getTodayWeek() {
	return ["일요일", "월요일", "화요일", "수요일", "목요일", "금요일", "토요일"][new Date().getDay()];
}
*/

//-----------------------------------------------------
// 현재 시작의 년-월-일(요일)을 문자로 리턴하는 함수 선언
//-----------------------------------------------------
function getTodayYMDW() {
	// 변수에 담아서 사용하는게 좋다
	var today = new Date();
	var year = today.getFullYear();
	var month = today.getMonth()+1;
	var date = today.getDate();
	var week = getTodayWeek().replace("요일", "");

	var today_month = "0";
	var today_date = "0";

	if(month < 10){
		month = "0" + month;
	} 

	if(date < 10) {
		date = "0" + date;
	} 

	return year + "-" + month + "-" + date + "(" + week + ")";
}

//-----------------------------------------------------
// 매개변수로 들어온 날짜문자가 오늘날짜와 동일하면 true 리턴하는 함수, 아니면 false
//-----------------------------------------------------
function isToday(dateStr) {
	try {
		//-----------------------------------------------------
		// <1> 변수 today 선언. 오늘 날짜를 관리하는 Date 객체 생성하고 메위주를 today에 저장하기
		//-----------------------------------------------------
		var today = new Date();
		var flag = false;
		
		/*
		//-----------------------------------------------------
		// <1> 변수 arr 선언, dateStr 매개변수 안의 날짜 문자를 - 기준으로 토막내어 Array 객체 안에 담기
		// <2> Array 객체 안의 배열변수 안의 데이터 꺼내어 year, month, date 변수에 저장하기
		// <3> String 객체의 trim 메소드 호출로 앞뒤 공백 제거하기
		//-----------------------------------------------------
		var arr = dateStr.split("-");		// <1>
		var year = arr[0];					// <2>
		var month = arr[1];
		var date = arr[2];
		year = year.trim();					// <3>
		month = month.trim();
		date = date.trim();
		
		//-----------------------------------------------------
		// parseInt 라는 내장 함수를 호출하여
		// year, month, date 변수 안의 숫자문자를 정수 숫자로 바꾸기
		// 07, 7 로 입력할 수 있으므로
		//-----------------------------------------------------
		year = parseInt(year, 10);
		month = parseInt(month, 10);	
		date = parseInt(date, 10);
		
		//-----------------------------------------------------
		// <1> Date 객체의 getFullYear 메소드 호출로 년도 얻어 변수 today_year에 저장하기
		// <2> Date 객체의 getMonth 메소드 호출로 월 얻어 변수 today_month에 저장하기
		// <3> Date 객체의 getDate 메소드 호출로 일 얻어 변수 today_date에 저장하기
		//-----------------------------------------------------
		var today_year = today.getFullYear();
		var today_month = today.getMonth()+1;
		var today_date = today.getDate();
		
		//-----------------------------------------------------
		// 매개 변수로 들어온 년월일이 오늘 날짜의 년월일과 동일하면 true 리턴하기
		// 아니면 false 리턴하기
		//-----------------------------------------------------
		return year == today_year && month == today_month && date == today_date;
		*/
		
		//-----------------------------------------------------
		// arr의 문자를 꺼내오면서 숫자문자를 숫자로 치환하여 변수에 대입한다.
		//-----------------------------------------------------
		var arr = dateStr.split("-");
		
		//-----------------------------------------------------
		// trim() 메서드 호출하여 공백 제거하기
		//-----------------------------------------------------
		/*
		var year = parseInt(arr[0].trim(), 10);
		var month = parseInt(arr[1].trim(), 10);
		var date = parseInt(arr[2].trim(), 10);
		*/
		
		//-----------------------------------------------------
		// deleteBlank(str) 메서드 호출하여 공백 제거하기
		//-----------------------------------------------------
		var year = parseInt(deleteBlank(arr[0]), 10);
		var month = parseInt(deleteBlank(arr[1]), 10);
		var date = parseInt(deleteBlank(arr[2]), 10);
		
		// 년, 월, 일이 지금 이 순간과 같다면
		if(year == today.getFullYear() && month == today.getMonth()+1 && date == today.getDate()){
			flag = true;
		}
		
	} catch(e) {
		alert("isToday 에서 에러발생!" + e.message);
		flag = false;
	}

	return flag;
}

//-----------------------------------------------------
// 매개변수로 들어온 문자에서 모든 공백을 제거하고 난 후의 문자 리턴하기
//-----------------------------------------------------
function deleteBlank( str ){

	try {
		
		// 방법1
		//-----------------------------------------------------
		// 공백 제거한 문자 저장할 변수 result 선언
		//-----------------------------------------------------
		var result ="";
		
		//-----------------------------------------------------
		// 반복문 돌리면서 매개변수로 들어온 문자열 중 한 개씩 접근해서
		// 공백이 아닌 문자만 result 변수에 누적시키기
		// <1> 만약 i 번째 문자가 공백이 아니면 i번째 문자를 result 변수에 누적시키기
		//-----------------------------------------------------
		for(var i = 0; i < str.length; i++){
			if(str.charAt(i) != " "){		// <1>
				result = result + str.charAt(i);
			}
		}
		
		//-----------------------------------------------------
		// 변수 result 안의 데이터 리턴하기
		//-----------------------------------------------------
		return result;
		

		// 방법2
		//-----------------------------------------------------
		// split() 함수 호출하여 공백 기분으로 자르고 Array 객체 붙이기
		//-----------------------------------------------------
		// return str.split(" ").join("");


		// 방법3
		/*
		var result = "";

		for(var i = 0; i < str.length; i++) {
			result = str.replace(" ", "");
		}

		return result;
		*/

	} catch(e) {
		alert("deleteBlank 함수에서 에러 발생!" + e.message)
		return str;
	}
}

//-----------------------------------------------------
// 매개변수로 받은 dateStr 까지 몇일 남았는지 구해서 리턴하는 함수 선언
//-----------------------------------------------------
function get_dDay(dateStr) {

	try {
		//-----------------------------------------------------
		// <1> 지금 이 순간 today 변수 저장
		// <2> xday_arr 변수에 매개변수로 받은 date "-" 기준으로 토막내어 Array 객체 안에 담기
		// <3> 년, 월, 일 변수에 배열에 있는 데이터 꺼내어 저장
		// <4> dday 변수 선언하여 매개변수로 받은 년, 월, 일 Date 객체 생성
		// <5> interval 변수에 받은 날짜 - 오늘 날짜 차이 구해서 저장
		// <6> interval 변수 안의 데이터 리턴하기
		//-----------------------------------------------------
		var today = new Date();							// <1>
		var xday_arr = dateStr.split("-");				// <2>
				
		var xday_year = parseInt(xday_arr[0], 10);		// <3>
		var xday_month = parseInt(xday_arr[1], 10);		
		var xday_date = parseInt(xday_arr[2], 10);		
				
		var xday = new Date(xday_year, xday_month - 1, xday_date);	// <4>

		var interval = Math.ceil((xday.getTime() - today.getTime())/(60*60*24*1000)); // <5>

		return interval;				// <6>
	} catch(e) {
		alert("get_dDay 함수에서 에러 발생!" + e.message);
		return -1;
	}
}